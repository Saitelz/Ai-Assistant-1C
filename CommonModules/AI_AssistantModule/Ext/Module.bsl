#Область ПрограммныйИнтерфейс

// Отправляет запрос к ИИ и получает ответ
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса пользователя
//  КонтекстЗапроса - Структура - Дополнительный контекст (текущий документ, элемент и т.д.)
//
// Возвращаемое значение:
//  Строка - Ответ от ИИ с рекомендациями
//
Функция ОтправитьЗапросКИИ(ТекстЗапроса, КонтекстЗапроса = Неопределено) Экспорт
    
    Попытка
        // Формируем JSON для запроса к API
        Json = СформироватьJsonЗапроса(ТекстЗапроса, КонтекстЗапроса);
        
        // Отправляем запрос к API
        РезультатЗапроса = ВыполнитьHTTPЗапрос("POST", "https://api.openai.com/v1/chat/completions", Json);
        
        // Обрабатываем ответ от API
        Ответ = РазобратьОтветОтAPI(РезультатЗапроса);
        
        Возврат Ответ;
    Исключение
        ЗаписатьОшибкуВЖурналРегистрации(ОписаниеОшибки());
        Возврат "Произошла ошибка при обращении к ИИ: " + ОписаниеОшибки();
    КонецПопытки;
    
КонецФункции

// Сохраняет настройки API для ИИ
//
// Параметры:
//  Ключ - Строка - Ключ API
//  Модель - Строка - Модель ИИ (например, "gpt-4")
//
Процедура СохранитьНастройкиAPI(Ключ, Модель) Экспорт
    
    ХранилищеОбщихНастроек.Сохранить("AI_Assistant", "APIKey", Ключ);
    ХранилищеОбщихНастроек.Сохранить("AI_Assistant", "Model", Модель);
    
КонецПроцедуры

// Получает настройки API для ИИ
//
// Возвращаемое значение:
//  Структура - Содержит ключ API и модель ИИ
//
Функция ПолучитьНастройкиAPI() Экспорт
    
    Результат = Новый Структура;
    Результат.Вставить("Ключ", ХранилищеОбщихНастроек.Загрузить("AI_Assistant", "APIKey"));
    Результат.Вставить("Модель", ХранилищеОбщихНастроек.Загрузить("AI_Assistant", "Model"));
    
    Если Результат.Ключ = Неопределено Тогда
        Результат.Ключ = "";
    КонецЕсли;
    
    Если Результат.Модель = Неопределено Тогда
        Результат.Модель = "gpt-4";
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует текст запроса в формате JSON для отправки к API
//
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса пользователя
//  КонтекстЗапроса - Структура - Дополнительный контекст (текущий документ, элемент и т.д.)
//
// Возвращаемое значение:
//  Строка - JSON строка для запроса к API
//
Функция СформироватьJsonЗапроса(ТекстЗапроса, КонтекстЗапроса)
    
    НастройкиAPI = ПолучитьНастройкиAPI();
    
    СистемныйКонтекст = "Ты — ИИ-ассистент в системе 1С:ERP. Твоя задача — помогать пользователям находить " +
                       "необходимые функции и объяснять, как решать задачи в 1С:ERP. " +
                       "Давай ясные и пошаговые инструкции, учитывая уровень новичка.";
    
    ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    
    ЗаписьJSON.ЗаписатьНачалоОбъекта();
    
    ЗаписьJSON.ЗаписатьИмяСвойства("model");
    ЗаписьJSON.ЗаписатьЗначение(НастройкиAPI.Модель);
    
    ЗаписьJSON.ЗаписатьИмяСвойства("messages");
    ЗаписьJSON.ЗаписатьНачалоМассива();
    
    // Системное сообщение
    ЗаписьJSON.ЗаписатьНачалоОбъекта();
    ЗаписьJSON.ЗаписатьИмяСвойства("role");
    ЗаписьJSON.ЗаписатьЗначение("system");
    ЗаписьJSON.ЗаписатьИмяСвойства("content");
    ЗаписьJSON.ЗаписатьЗначение(СистемныйКонтекст);
    ЗаписьJSON.ЗаписатьКонецОбъекта();
    
    // Запрос пользователя
    ЗаписьJSON.ЗаписатьНачалоОбъекта();
    ЗаписьJSON.ЗаписатьИмяСвойства("role");
    ЗаписьJSON.ЗаписатьЗначение("user");
    
    // Если есть контекст, добавляем его к запросу
    Если КонтекстЗапроса <> Неопределено Тогда
        ЗаписьJSON.ЗаписатьИмяСвойства("content");
        ЗаписьJSON.ЗаписатьЗначение("Запрос: " + ТекстЗапроса + ". Контекст: " + ПолучитьСтрокуКонтекста(КонтекстЗапроса));
    Иначе
        ЗаписьJSON.ЗаписатьИмяСвойства("content");
        ЗаписьJSON.ЗаписатьЗначение(ТекстЗапроса);
    КонецЕсли;
    
    ЗаписьJSON.ЗаписатьКонецОбъекта();
    
    ЗаписьJSON.ЗаписатьКонецМассива();
    
    ЗаписьJSON.ЗаписатьИмяСвойства("temperature");
    ЗаписьJSON.ЗаписатьЗначение(0.7);
    
    ЗаписьJSON.ЗаписатьКонецОбъекта();
    
    Возврат ЗаписьJSON.Закрыть();
    
КонецФункции

// Преобразует структуру контекста в строку
//
// Параметры:
//  КонтекстЗапроса - Структура - Контекст запроса
//
// Возвращаемое значение:
//  Строка - Строковое представление контекста
//
Функция ПолучитьСтрокуКонтекста(КонтекстЗапроса)
    
    Если ТипЗнч(КонтекстЗапроса) <> Тип("Структура") Тогда
        Возврат "";
    КонецЕсли;
    
    Результат = "";
    
    Для Каждого Элемент Из КонтекстЗапроса Цикл
        Результат = Результат + Элемент.Ключ + ": " + Строка(Элемент.Значение) + "; ";
    КонецЦикла;
    
    Возврат Результат;
    
КонецФункции

// Отправляет HTTP-запрос к API
//
// Параметры:
//  Метод - Строка - HTTP-метод (GET, POST и т.д.)
//  URL - Строка - URL для запроса
//  Данные - Строка - Данные для отправки в формате JSON
//
// Возвращаемое значение:
//  Строка - Ответ от API
//
Функция ВыполнитьHTTPЗапрос(Метод, URL, Данные)
    
    НастройкиAPI = ПолучитьНастройкиAPI();
    
    Соединение = Новый HTTPСоединение(URL, , , , , 30);
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("Content-Type", "application/json");
    Заголовки.Вставить("Authorization", "Bearer " + НастройкиAPI.Ключ);
    
    Запрос = Новый HTTPЗапрос("", Заголовки);
    Запрос.УстановитьТелоИзСтроки(Данные);
    
    Ответ = Соединение.ВызватьHTTPМетод(Метод, Запрос);
    
    Если Ответ.КодСостояния <> 200 Тогда
        ВызватьИсключение "Ошибка при вызове API: " + Ответ.КодСостояния + " - " + Ответ.ПолучитьТелоКакСтроку();
    КонецЕсли;
    
    Возврат Ответ.ПолучитьТелоКакСтроку();
    
КонецФункции

// Разбирает ответ от API
//
// Параметры:
//  ОтветAPI - Строка - Ответ от API в формате JSON
//
// Возвращаемое значение:
//  Строка - Текст ответа от ИИ
//
Функция РазобратьОтветОтAPI(ОтветAPI)
    
    ЧтениеJSON = Новый ЧтениеJSON;
    ЧтениеJSON.УстановитьСтроку(ОтветAPI);
    
    Результат = ПрочитатьJSON(ЧтениеJSON);
    ЧтениеJSON.Закрыть();
    
    Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
        ВызватьИсключение "Некорректный формат ответа от API";
    КонецЕсли;
    
    Если Результат.Получить("choices") = Неопределено Тогда
        ВызватьИсключение "В ответе от API отсутствуют данные";
    КонецЕсли;
    
    Выбор = Результат.Получить("choices")[0];
    
    Если Выбор.Получить("message") = Неопределено Тогда
        ВызватьИсключение "В ответе от API отсутствует сообщение";
    КонецЕсли;
    
    Сообщение = Выбор.Получить("message");
    
    Если Сообщение.Получить("content") = Неопределено Тогда
        ВызватьИсключение "В ответе от API отсутствует содержимое";
    КонецЕсли;
    
    Возврат Сообщение.Получить("content");
    
КонецФункции

// Записывает информацию об ошибке в журнал регистрации
//
// Параметры:
//  ТекстОшибки - Строка - Текст ошибки для записи
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки)
    
    ЗаписьЖурналаРегистрации("AI_Assistant", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
    
КонецПроцедуры

#КонецОбласти 